MotChallenge2DBox
./experiments/example_mot20_training_fastreid_msmt_BOT_R50_ibn_04-15_09:41:56.268796/oracle
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 191, in eval_sequence
    raw_data = dataset.get_raw_seq_data(tracker, seq)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/datasets/_base_dataset.py", line 92, in get_raw_seq_data
    raw_gt_data = self._load_raw_file(tracker, seq, is_gt=True)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/datasets/mot_challenge_2d_box.py", line 229, in _load_raw_file
    time_data = np.asarray(read_data[time_key], dtype=np.float)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/site-packages/numpy/__init__.py", line 305, in __getattr__
    raise AttributeError(__former_attrs__[attr])
AttributeError: module 'numpy' has no attribute 'float'.
`np.float` was a deprecated alias for the builtin `float`. To avoid this error in existing code, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
AttributeError: module 'numpy' has no attribute 'float'.
`np.float` was a deprecated alias for the builtin `float`. To avoid this error in existing code, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations





MotChallenge2DBox
./experiments/example_mot20_training_fastreid_msmt_BOT_R50_ibn_04-15_10:08:38.660958/oracle
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/datasets/_base_dataset.py", line 152, in _load_simple_text_file
    fp = open(file)
FileNotFoundError: [Errno 2] No such file or directory: '/Users/azel/Developer/SUSHI/TrackEval/data/trackers/mot_challenge/./experiments/example_mot20_training_fastreid_msmt_BOT_R50_ibn_04-15_10:08:38.660958/oracle/mot_files/MOT20-01.txt'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 191, in eval_sequence
    raw_data = dataset.get_raw_seq_data(tracker, seq)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/datasets/_base_dataset.py", line 93, in get_raw_seq_data
    raw_tracker_data = self._load_raw_file(tracker, seq, is_gt=False)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/datasets/mot_challenge_2d_box.py", line 202, in _load_raw_file
    read_data, ignore_data = self._load_simple_text_file(file, is_zipped=self.data_is_zipped, zip_file=zip_file)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/datasets/_base_dataset.py", line 209, in _load_simple_text_file
    raise TrackEvalException(
trackeval.utils.TrackEvalException: File MOT20-01.txt cannot be read because it is either not present or invalidly formatted
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
trackeval.utils.TrackEvalException: File MOT20-01.txt cannot be read because it is either not present or invalidly formatted





MotChallenge2DBox
./experiments/example_mot20_training_fastreid_msmt_BOT_R50_ibn_04-15_11:47:40.133219/oracle
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 195, in eval_sequence
    data = dataset.get_preprocessed_seq_data(raw_data, cls)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/datasets/mot_challenge_2d_box.py", line 360, in get_preprocessed_seq_data
    to_remove_tracker = np.array([], np.int)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/site-packages/numpy/__init__.py", line 306, in __getattr__
    raise AttributeError(__former_attrs__[attr])
AttributeError: module 'numpy' has no attribute 'int'.
`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
AttributeError: module 'numpy' has no attribute 'int'.
`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations





MotChallenge2DBox
./experiments/example_mot20_training_fastreid_msmt_BOT_R50_ibn_04-15_12:07:20.577095/oracle
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 195, in eval_sequence
    data = dataset.get_preprocessed_seq_data(raw_data, cls)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/datasets/mot_challenge_2d_box.py", line 414, in get_preprocessed_seq_data
    data['gt_ids'][t] = gt_id_map[data['gt_ids'][t]].astype(np.int)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/site-packages/numpy/__init__.py", line 306, in __getattr__
    raise AttributeError(__former_attrs__[attr])
AttributeError: module 'numpy' has no attribute 'int'.
`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
AttributeError: module 'numpy' has no attribute 'int'.
`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations





MotChallenge2DBox
./experiments/example_mot20_training_fastreid_msmt_BOT_R50_ibn_04-15_12:16:19.474474/oracle
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 197, in eval_sequence
    seq_res[cls][met_name] = metric.eval_sequence(data)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/metrics/hota.py", line 31, in eval_sequence
    res[field] = np.zeros((len(self.array_labels)), dtype=np.float)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/site-packages/numpy/__init__.py", line 306, in __getattr__
    raise AttributeError(__former_attrs__[attr])
AttributeError: module 'numpy' has no attribute 'float'.
`np.float` was a deprecated alias for the builtin `float`. To avoid this error in existing code, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
AttributeError: module 'numpy' has no attribute 'float'.
`np.float` was a deprecated alias for the builtin `float`. To avoid this error in existing code, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations





MotChallenge2DBox
./experiments/example_mot20_training_fastreid_msmt_BOT_R50_ibn_04-15_12:25:36.567254/oracle
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 197, in eval_sequence
    seq_res[cls][met_name] = metric.eval_sequence(data)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/metrics/identity.py", line 83, in eval_sequence
    res['IDFN'] = fn_mat[match_rows, match_cols].sum().astype(np.int)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/site-packages/numpy/__init__.py", line 306, in __getattr__
    raise AttributeError(__former_attrs__[attr])
AttributeError: module 'numpy' has no attribute 'int'.
`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/azel/Developer/SUSHI/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/Users/azel/miniforge3/envs/SUSHI/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
AttributeError: module 'numpy' has no attribute 'int'.
`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 168, in _load_simple_text_file
    timestep = str(int(float(row[time_col])))
ValueError: could not convert string to float: 'frame'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 204, in _load_simple_text_file
    raise TrackEvalException(exc_str)
trackeval.utils.TrackEvalException: In file MOT17-02-DPM.txt the following line cannot be read correctly: 
 frame id bb_left bb_top bb_width bb_height conf x y z

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 191, in eval_sequence
    raw_data = dataset.get_raw_seq_data(tracker, seq)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 93, in get_raw_seq_data
    raw_tracker_data = self._load_raw_file(tracker, seq, is_gt=False)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/mot_challenge_2d_box.py", line 202, in _load_raw_file
    read_data, ignore_data = self._load_simple_text_file(file, is_zipped=self.data_is_zipped, zip_file=zip_file)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 209, in _load_simple_text_file
    raise TrackEvalException(
trackeval.utils.TrackEvalException: File MOT17-02-DPM.txt cannot be read because it is either not present or invalidly formatted
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
trackeval.utils.TrackEvalException: File MOT17-02-DPM.txt cannot be read because it is either not present or invalidly formatted





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 77, in evaluate
    with Pool(config['NUM_PARALLEL_CORES']) as pool:
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 215, in __init__
    self._repopulate_pool()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 306, in _repopulate_pool
    return self._repopulate_pool_static(self._ctx, self.Process,
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 329, in _repopulate_pool_static
    w.start()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/process.py", line 121, in start
    self._popen = self._Popen(self)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/context.py", line 288, in _Popen
    return Popen(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.





MotChallenge2DBox
trackers
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 168, in _load_simple_text_file
    timestep = str(int(float(row[time_col])))
ValueError: could not convert string to float: 'frame'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 204, in _load_simple_text_file
    raise TrackEvalException(exc_str)
trackeval.utils.TrackEvalException: In file MOT17-02-DPM.txt the following line cannot be read correctly: 
 frame id bb_left bb_top bb_width bb_height conf x y z

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 191, in eval_sequence
    raw_data = dataset.get_raw_seq_data(tracker, seq)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 93, in get_raw_seq_data
    raw_tracker_data = self._load_raw_file(tracker, seq, is_gt=False)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/mot_challenge_2d_box.py", line 202, in _load_raw_file
    read_data, ignore_data = self._load_simple_text_file(file, is_zipped=self.data_is_zipped, zip_file=zip_file)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 209, in _load_simple_text_file
    raise TrackEvalException(
trackeval.utils.TrackEvalException: File MOT17-02-DPM.txt cannot be read because it is either not present or invalidly formatted
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
trackeval.utils.TrackEvalException: File MOT17-02-DPM.txt cannot be read because it is either not present or invalidly formatted





MotChallenge2DBox
trackers
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 195, in eval_sequence
    data = dataset.get_preprocessed_seq_data(raw_data, cls)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/mot_challenge_2d_box.py", line 324, in get_preprocessed_seq_data
    self._check_unique_ids(raw_data)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 315, in _check_unique_ids
    raise TrackEvalException(exc_str)
trackeval.utils.TrackEvalException: Tracker predicts the same ID more than once in a single timestep (seq: MOT17-02-DPM, frame: 581, ids: 76)
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
trackeval.utils.TrackEvalException: Tracker predicts the same ID more than once in a single timestep (seq: MOT17-02-DPM, frame: 581, ids: 76)





MotChallenge2DBox
trackers
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 166, in _load_simple_text_file
    if row[-1] in '':
IndexError: list index out of range

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 204, in _load_simple_text_file
    raise TrackEvalException(exc_str)
trackeval.utils.TrackEvalException: In file MOT17-02-DPM.txt the following line cannot be read correctly: 


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 191, in eval_sequence
    raw_data = dataset.get_raw_seq_data(tracker, seq)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 93, in get_raw_seq_data
    raw_tracker_data = self._load_raw_file(tracker, seq, is_gt=False)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/mot_challenge_2d_box.py", line 202, in _load_raw_file
    read_data, ignore_data = self._load_simple_text_file(file, is_zipped=self.data_is_zipped, zip_file=zip_file)
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/datasets/_base_dataset.py", line 209, in _load_simple_text_file
    raise TrackEvalException(
trackeval.utils.TrackEvalException: File MOT17-02-DPM.txt cannot be read because it is either not present or invalidly formatted
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/azel/Developer/diff-MOT/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/Users/azel/miniforge3/envs/pyg-m1/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
trackeval.utils.TrackEvalException: File MOT17-02-DPM.txt cannot be read because it is either not present or invalidly formatted





MotChallenge2DBox
trackers
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/usr/lib/python3.10/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/usr/lib/python3.10/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/home/dmmp/tesi/diff-MOT/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/home/dmmp/tesi/diff-MOT/TrackEval/trackeval/eval.py", line 195, in eval_sequence
    data = dataset.get_preprocessed_seq_data(raw_data, cls)
  File "/home/dmmp/tesi/diff-MOT/TrackEval/trackeval/_timing.py", line 64, in wrap
    return f(*args, **kw)
  File "/home/dmmp/tesi/diff-MOT/TrackEval/trackeval/datasets/mot_challenge_2d_box.py", line 354, in get_preprocessed_seq_data
    raise TrackEvalException(
trackeval.utils.TrackEvalException: Evaluation is only valid for pedestrian class. Non pedestrian class (9) found in sequence MOT17-02-DPM at timestep 0.
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/dmmp/tesi/diff-MOT/TrackEval/trackeval/eval.py", line 81, in evaluate
    results = pool.map(_eval_sequence, seq_list)
  File "/usr/lib/python3.10/multiprocessing/pool.py", line 367, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/usr/lib/python3.10/multiprocessing/pool.py", line 774, in get
    raise self._value
trackeval.utils.TrackEvalException: Evaluation is only valid for pedestrian class. Non pedestrian class (9) found in sequence MOT17-02-DPM at timestep 0.





